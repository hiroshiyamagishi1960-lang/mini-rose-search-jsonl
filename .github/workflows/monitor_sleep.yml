name: Monitor Render Sleep (Email via GitHub Notifications)

on:
  schedule:
    - cron: "*/5 * * * *"   # 5分ごと（UTC）
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 20   # 3回試行（最大約15分）でも安全に収まる

    env:
      BASE_URL: https://mini-rose-search-jsonl.onrender.com
      UA: "curl/monitor-sleep (GitHub Actions)"
      LABEL: "render-sleep"
      ISSUE_TITLE: "ALERT: Render may be asleep (health check failed 3/3)"

    steps:
      - name: Show schedule (UTC)
        run: date -u +"UTC %Y-%m-%d %H:%M:%S"

      - name: Check /health (3 attempts over ~15 min)
        id: probe
        shell: bash
        run: |
          set -euo pipefail
          FAILS=0
          ATTEMPTS=3
          INTERVAL=300   # 5分おきに確認（3回で約15分）
          for i in $(seq 1 $ATTEMPTS); do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" \
                    -A "$UA" --max-time 8 --connect-timeout 3 \
                    "$BASE_URL/health" || echo "000")
            echo "[$i/$ATTEMPTS] /health -> HTTP $CODE"
            if [ "$CODE" != "200" ]; then
              FAILS=$((FAILS+1))
            fi
            # 最後の試行以外は待機
            if [ "$i" -lt "$ATTEMPTS" ]; then
              sleep "$INTERVAL"
            fi
          done
          echo "fails=$FAILS" >> "$GITHUB_OUTPUT"

      - name: Decide and summarize
        id: decide
        run: |
          if [ "${{ steps.probe.outputs.fails }}" -ge 3 ]; then
            echo "alert=yes" >> "$GITHUB_OUTPUT"
            echo "Render is likely asleep or unreachable (3/3 failed)."
          else
            echo "alert=no" >> "$GITHUB_OUTPUT"
            echo "Render responded at least once (no alert)."
          fi

      # 失敗3/3のときだけ Issue を作成/追記（＝GitHub通知メールが飛ぶ）
      - name: Create or update alert issue (email via GitHub notifications)
        if: steps.decide.outputs.alert == 'yes'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const label = process.env.LABEL;
            const title = process.env.ISSUE_TITLE;
            const now = new Date().toISOString();
            const body = [
              `Time (UTC): ${now}`,
              `Endpoint: ${process.env.BASE_URL}/health`,
              `Result: failed 3/3 over ~15 min`,
              `Runner: ${process.env.GITHUB_ACTION}`,
              `Note: This issue triggers GitHub email notifications.`,
            ].join('\n');

            // 既存の未クローズIssue（同タイトル・同ラベル）を探す
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: label
            });

            const existing = issues.find(i => i.title === title);
            if (existing) {
              // 既存に追記して通知
              await github.rest.issues.createComment({
                owner, repo, issue_number: existing.number, body
              });
              core.info(`Updated existing alert issue #${existing.number}`);
            } else {
              // 新規作成
              const { data: created } = await github.rest.issues.create({
                owner, repo, title, body, labels: [label]
              });
              core.info(`Created new alert issue #${created.number}`);
            }

      # 常に success で終了（監視は“通知の有無”で判断）
      - name: Mark success
        run: echo "Done."
